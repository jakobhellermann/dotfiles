"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

[custom]
show-commit-id = false
coauthors = []

[user]
name = "Jakob Hellermann"
email = "jakob.hellermann@protonmail.com"

[ui]
default-command = "log"
color = "always"
conflict-marker-style = "git"
always-allow-large-revsets = true
movement.edit = true

editor = "nvim"
diff-editor = "diffpatch"
merge-editor = "vscode"
# pager = "less -FRXS --wordwrap"
pager = "less -FRX --wordwrap"

[git]
colocate = true
push-new-bookmarks = true
write-change-id-header = true
private-commits = "private"

[colors]
"diff token".underline = false
# "diff removed token" = { bg = "#221111", underline = false }
# "diff added token" = { bg = "#002200", underline = false }

[fix.tools.rustfmt]
command = ["rustfmt", "--emit=stdout", "--edition=2024"]
patterns = ["glob:'**/*.rs'"]

[fix.tools.ktfmt]
command = ["ktfmt", "--kotlinlang-style", "--stdin-name=$path", "-"]
patterns = ["glob:'**/*.kt'"]

[aliases]
# shortcuts
sq = ['squash']
ab = ['abandon']
cii = ['commit', '-i']
fixme = ['fix', '-s@']

# commands
tug = ['bookmark', 'move', '--from', 'heads(::@- & bookmarks() ~ private)', '--to', '@-']
swap = ['rebase', '-r', '@', '-B', '@-']
squash-restore = ['restore', '--from', '@', '--into', '@-', '--restore-descendants']
# hsplit = ['split', '--parallel', '--config', 'ui.editor="true"']
# hsquash = ['squash', '--from', 'siblings(@)']

# movement
dev = ['edit', 'dev']
head = ['new', 'coalesce(dev, trunk())']
nextconflict = ['edit', 'firstconflict']
top = ['util', 'exec', 'sh', '--', '-c', 'jj git fetch --all-remotes && jj new "trunk()" --quiet && jj']
sib = ['util', 'exec', 'sh', '--', '-c', 'jj prev && jj next']

# rebase stuf
dev-create = ['new', 'all:heads(trunk():: & mine())', '-m', 'dev']
dev-insert = ['rebase', '-A', 'main', '-B', 'dev']
dev-add = ['rebase', '-s', 'dev', '-d', 'all:dev-', '-d']
all-rebase = ['rebase', '-s', 'all:roots(immutable_heads()..)', '-d', 'trunk()']
insert-after-parent = ['rebase', '-s', '@', '-A', '@-']
outsert = ['rebase', '-r', '@', '-d', '@-']

sq-restore-descendants = ['restore', '-f', '@', '-t', '@-', '--restore-descendants']

# plumbing
gitcommit = ['log', '--ignore-working-copy', '--no-graph', '--color', 'never', '--no-pager', '-T', 'commit_id', '-r', '@']

fork = ['util', 'exec', 'sh', '--', '-c', '''
set -euo pipefail

if ! gh auth status>/dev/null; then
echo "Run gh auth login"
exit
fi

if jj git remote list | grep 'upstream' >/dev/null; then
echo "remote 'upstream' already exists"
exit
fi
origin=$(jj git remote list | grep 'origin' | cut -d' ' -f2)

fork=$(yes no | gh repo fork "$origin" 2>&1 || true)
fork=$(echo "$fork" \
| sed -r 's|https://github.com/|git@github.com:|' \
| sed -r 's|(.*) already exists|git@github.com:\1|')

echo "$fork"

jj git remote rename origin upstream 2>/dev/null
jj config get "revset-aliases.'trunk()'" | sed 's/origin/upstream/' | xargs jj config set --repo "revset-aliases.'trunk()'"

jj git remote add origin "$fork"
''']

[revsets]
log-graph-prioritize = "coalesce(dev, @, present(main))"
log = "log"

[revset-aliases]
firstconflict = "roots(conflicts())"
siblings = "siblings(@)"
# all = "::"
dev = 'description(exact:"dev\n")'
empty = 'mutable() & empty() & description("") ~@'
log = "present(@) | ancestors(immutable_heads().. ~ hidden, 4) | present(trunk())"
private = "description(glob:'private:*')"
hidden = "description(glob:'hidden:*')"
'siblings(x)' = "x-+ ~x"

[templates]
log = 'builtin_log_oneline ++ if((!description || description == "dev\n") && current_working_copy, diff.summary())'
op_log = 'builtin_op_log_oneline'
draft_commit_description = '''
concat(
  coalesce(description, default_commit_description),
  surround(
    "\nJJ: This commit contains the following changes:\n", "",
    indent("JJ:     ", diff.summary()),
  ),
  surround("JJ: \nJJ: ignore-rest\n", "", diff.git())
)
'''

[template-aliases]
nl = '"\n"'
default_commit_description = '''
surround("\n\n", "\n", config("custom.coauthors").as_string_list().map(|author| "Co-Authored-By: " ++ author).join("\n"))
'''

'format_short_id(id)' = 'id.shortest(4)'
'format_short_signature(signature)' = 'signature.name()'
'format_short_signature_oneline(signature)' = 'signature.name()'
'format_timestamp(timestamp)' = 'timestamp.ago()'
'format_short_commit_id(id)' = 'if(config("custom.show-commit-id").as_boolean(), id.shortest(4))'
'format_operation_oneline(op)' = '''
  separate(" ",
    op.id().short(8), op.time().end().ago(),
    clean_operation_message(op.description().first_line()),
    if(op.tags(), op.tags()),
  )
'''
'clean_operation_message(msg)' = '''
coalesce(
  if(snapshot, label("empty", "snapshot")),
  if(msg.starts_with("squash commits into"), msg.substr(0, 28)),
  if(msg.starts_with("describe commit"), msg.substr(0, 24)),
  if(msg.starts_with("abandon commit"), msg.substr(0, 23)),
  if(msg.starts_with("undo operation"), msg.substr(0, 23)),
  if(msg.starts_with("split commit"), msg.substr(0, 21)),
  if(msg.starts_with("edit commit"), msg.substr(0, 20)),
  if(msg.starts_with("commit "), msg.substr(0, 15)),
  msg
)
'''

[merge-tools.gitpatch]
program = "sh"
edit-args = [
  "-c",
  '''
  set -eu
  rm -f "$right/JJ-INSTRUCTIONS"
  git -C "$left" init -q
  git -C "$left" add -A
  git -C "$left" commit -q -m baseline --allow-empty
  mv "$left/.git" "$right"
  git -C "$right" add --intent-to-add -A
  git -C "$right" add -p
  git -C "$right" diff-index --quiet --cached HEAD && { echo "No changes done, aborting split."; exit 1; }
  git -C "$right" commit -q -m split
  git -C "$right" restore . # undo changes in modified files
  git -C "$right" reset .   # undo --intent-to-add
  git -C "$right" clean -q -df # remove untracked files
  ''',
]
merge-args = ["-c", "echo gitpatch cannot be used as a merge tool"]
diff-args = ["-c", "echo gitpatch cannot be used as a diff tool"]

[[--scope]]
--when.commands = ["evolog", "operation"]
[--scope.custom]
show-commit-id = true
